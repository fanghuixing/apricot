[
   PackageDec                       -- _1 KW["package"] _2 KW[";"],
   PackageDec.1:iter-star           -- _1,
   TypeImportDec                    -- KW["import"] _1 KW[";"],
   TypeImportOnDemandDec            -- KW["import"] _1 KW["."] KW["*"] KW[";"],
   StaticImportDec                  -- KW["import"] KW["static"] _1 KW["."] _2 KW[";"],
   StaticImportOnDemandDec          -- KW["import"] KW["static"] _1 KW["."] KW["*"] KW[";"],
   Semicolon                        -- KW[";"],
   CompilationUnit                  -- _1 _2 _3,
   CompilationUnit.1:opt            -- _1,
   CompilationUnit.2:iter-star      -- _1,
   CompilationUnit.3:iter           -- _1,
   PackageName                      -- _1,
   PackageName.1:iter-sep           -- _1 KW["."],
   AmbName                          -- _1,
   AmbName                          -- _1 KW["."] _2,
   TypeName                         -- _1,
   TypeName                         -- _1 KW["."] _2,
   ExprName                         -- _1,
   ExprName                         -- _1 KW["."] _2,
   MethodName                       -- _1,
   MethodName                       -- _1 KW["."] _2,
   PackageOrTypeName                -- _1,
   PackageOrTypeName                -- _1 KW["."] _2,
   IntMath                          -- KW["Int"],
   RealMath                         -- KW["Real"],
   Boolean                          -- KW["boolean"],
   int                              -- KW["int"],
   real                             -- KW["real"],
   Invoke                           -- _1 KW["("] _2 KW[")"],
   Invoke.2:iter-star-sep           -- _1 KW[","],
   Method                           -- _1,
   Method                           -- _1 KW["."] _2,
   SuperMethod                      -- KW["super"] KW["."] _1,
   QSuperMethod                     -- _1 KW["."] KW["super"] KW["."] _2,
   GenericMethod                    -- _1 KW["."] _2,
   PostIncr                         -- _1 KW["++"],
   PostDecr                         -- _1 KW["--"],
   Null                             -- KW["null"],
   Null                             -- KW["Null"],
   Bool                             -- _1,
   True                             -- KW["true"],
   False                            -- KW["false"],
   True                             -- KW["True"],
   False                            -- KW["False"],
   Float                            -- _1,
   Float                            -- _1,
   Deci                             -- _1,
   Hexa                             -- _1,
   Octa                             -- _1,
   Lit                              -- _1,
   Class                            -- _1 KW["."] KW["class"],
   VoidClass                        -- KW["void"] KW["."] KW["class"],
   This                             -- KW["this"],
   QThis                            -- _1 KW["."] KW["this"],
   ArrayAccess                      -- _1 _2,
   Assign                           -- _1 KW["="] _2,
   AssignMul                        -- _1 KW["*="] _2,
   AssignDiv                        -- _1 KW["/="] _2,
   AssignRemain                     -- _1 KW["%="] _2,
   AssignPlus                       -- _1 KW["+="] _2,
   AssignMinus                      -- _1 KW["-="] _2,
   InstanceOf                       -- _1 KW["instanceof"] _2,
   Mul                              -- _1 KW["*"] _2,
   Div                              -- _1 KW["/"] _2,
   Remain                           -- _1 KW["%"] _2,
   Plus                             -- _1 KW["+"] _2,
   Minus                            -- _1 KW["-"] _2,
   Lt                               -- _1 KW["<"] _2,
   Gt                               -- _1 KW[">"] _2,
   LtEq                             -- _1 KW["<="] _2,
   GtEq                             -- _1 KW[">="] _2,
   Eq                               -- _1 KW["=="] _2,
   NotEq                            -- _1 KW["!="] _2,
   Synchronous                      -- _1 KW["||"] _2,
   Asynchronous                     -- _1 KW["~"] _2,
   LogicIn                          -- _1 KW["in"] _2,
   LogicAnd                         -- _1 KW["and"] _2,
   LogicOr                          -- _1 KW["or"] _2,
   LogicXOR                         -- _1 KW["xor"] _2,
   Cond                             -- _1 _2 _3,
   Plus                             -- KW["+"] _1,
   Minus                            -- KW["-"] _1,
   PreIncr                          -- KW["++"] _1,
   PreDecr                          -- KW["--"] _1,
   Not                              -- KW["!"] _1,
   CastPrim                         -- KW["("] _1 KW[")"] _2,
   CastRef                          -- KW["("] _1 KW[")"] _2,
   Field                            -- _1 KW["."] _2,
   SuperField                       -- KW["super"] KW["."] _1,
   QSuperField                      -- _1 KW["."] KW["super"] KW["."] _2,
   NewArray                         -- KW["new"] _1 _2 _3,
   NewArray.2:iter                  -- _1,
   NewArray.3:iter-star             -- _1,
   NewArray                         -- KW["new"] _1 _2 _3,
   NewArray.2:iter                  -- _1,
   Dim                              -- KW["["] _1 KW["]"],
   Dim                              -- KW["["] KW["]"],
   AnnoDec                          -- _1 KW["{"] _2 KW["}"],
   AnnoDec.2:iter-star              -- _1,
   AnnoDecHead                      -- _1 KW["@"] KW["interface"] _2,
   AnnoDecHead.1:iter-star          -- _1,
   AnnoDecHead                      -- _1 KW["@"] KW["interface"] _2,
   AnnoDecHead.1:iter-star          -- _1,
   Semicolon                        -- KW[";"],
   DefaultVal                       -- KW["default"] _1,
   ConstantDec                      -- _1 _2 _3 KW[";"],
   ConstantDec.1:iter-star          -- _1,
   ConstantDec.3:iter-sep           -- _1 KW[","],
   ConstantDec                      -- _1 _2 _3 KW[";"],
   ConstantDec.1:iter-star          -- _1,
   ConstantDec.3:iter-sep           -- _1 KW[","],
   InterfaceDec                     -- _1 KW["{"] _2 KW["}"],
   InterfaceDec.2:iter-star         -- _1,
   InterfaceDecHead                 -- _1 _2 _3,
   InterfaceDecHead.1:iter-star     -- _1,
   InterfaceDecHead.2:opt           -- _1,
   InterfaceDecHead                 -- _1 _2,
   InterfaceDecHead.1:opt           -- _1,
   ExtendsInterfaces                -- _1 KW["Interface"] _2,
   ExtendsInterfaces.1:iter-star    -- _1,
   ExtendsInterfaces.2:iter-sep     -- _1 KW[","],
   Semicolon                        -- KW[";"],
   ConstrDec                        -- _1 _2,
   ConstrDecHead                    -- _1 _2 _3 KW["("] _4 KW[")"],
   ConstrDecHead.1:iter-star        -- _1,
   ConstrDecHead.2:iter-star        -- _1,
   ConstrDecHead.4:iter-star-sep    -- _1 KW[","],
   ConstrBody                       -- KW["{"] _1 _2 KW["}"],
   ConstrBody.1:opt                 -- _1,
   ConstrBody.2:iter-star           -- _1,
   AltConstrInv                     -- KW["this"] KW["("] _1 KW[")"] KW[";"],
   AltConstrInv.1:iter-star-sep     -- _1 KW[","],
   SuperConstrInv                   -- KW["super"] KW["("] _1 KW[")"] KW[";"],
   SuperConstrInv.1:iter-star-sep   -- _1 KW[","],
   QSuperConstrInv                  -- _1 KW["."] KW["super"] KW["("] _2 KW[")"] KW[";"],
   QSuperConstrInv.2:iter-star-sep  -- _1 KW[","],
   InstanceInit                     -- _1,
   Empty                            -- KW[";"],
   Labeled                          -- _1 KW[":"] _2,
   ExprStm                          -- _1 KW[";"],
   If                               -- KW["if"] KW["("] _1 KW[")"] _2,
   If                               -- KW["if"] KW["("] _1 KW[")"] _2 KW["else"] _3,
   AssertStm                        -- KW["assert"] _1 KW[";"],
   AssertStm                        -- KW["assert"] _1 KW[":"] _2 KW[";"],
   Switch                           -- KW["switch"] KW["("] _1 KW[")"] _2,
   SwitchBlock                      -- KW["{"] _1 _2 KW["}"],
   SwitchBlock.1:iter-star          -- _1,
   SwitchBlock.2:iter-star          -- _1,
   SwitchGroup                      -- _1 _2,
   SwitchGroup.1:iter               -- _1,
   SwitchGroup.2:iter               -- _1,
   Case                             -- KW["case"] _1 KW[":"],
   Default                          -- KW["default"] KW[":"],
   While                            -- KW["while"] KW["("] _1 KW[")"] _2,
   DoWhile                          -- KW["do"] _1 KW["while"] KW["("] _2 KW[")"] KW[";"],
   For                              -- KW["for"] KW["("] _1 KW[";"] _2 KW[";"] _3 KW[")"] _4,
   For.2:opt                        -- _1,
   For.3:iter-star-sep              -- _1 KW[","],
   For                              -- KW["for"] KW["("] _1 KW[";"] _2 KW[";"] _3 KW[")"] _4,
   For.1:iter-star-sep              -- _1 KW[","],
   For.2:opt                        -- _1,
   For.3:iter-star-sep              -- _1 KW[","],
   ForEach                          -- KW["for"] KW["("] _1 KW[":"] _2 KW[")"] _3,
   Break                            -- KW["break"] _1 KW[";"],
   Break.1:opt                      -- _1,
   Continue                         -- KW["continue"] _1 KW[";"],
   Continue.1:opt                   -- _1,
   Return                           -- KW["return"] _1 KW[";"],
   Return.1:opt                     -- _1,
   Throw                            -- KW["throw"] _1 KW[";"],
   Synchronized                     -- KW["synchronized"] KW["("] _1 KW[")"] _2,
   Try                              -- KW["try"] _1 _2,
   Try.2:iter                       -- _1,
   Try                              -- KW["try"] _1 _2 KW["finally"] _3,
   Try.2:iter-star                  -- _1,
   Catch                            -- KW["catch"] KW["("] _1 KW[")"] _2,
   LocalVarDecStm                   -- _1 KW[";"],
   LocalVarDec                      -- _1 _2 _3,
   LocalVarDec.1:iter-star          -- _1,
   LocalVarDec.3:iter-sep           -- _1 KW[","],
   Block                            -- V  [V vs=2 [KW["{"] _1] KW["}"]],
   Block.1:iter-star                -- _1,
   ClassDecStm                      -- _1,
   MethodDec                        -- _1 _2,
   MethodDecHead                    -- _1 _2 _3 _4 KW["("] _5 KW[")"],
   MethodDecHead.1:iter-star        -- _1,
   MethodDecHead.2:iter-star        -- _1,
   MethodDecHead.5:iter-star-sep    -- _1 KW[","],
   Void                             -- KW["void"],
   Param                            -- _1 _2 _3,
   Param.1:iter-star                -- _1,
   NoMethodBody                     -- KW[";"],
   ArrayInit                        -- KW["{"] _1 KW["}"],
   ArrayInit.1:iter-star-sep        -- _1 KW[","],
   ArrayInit                        -- KW["{"] _1 KW[","] KW["}"],
   ArrayInit.1:iter-star-sep        -- _1 KW[","],
   Anno                             -- KW["@"] _1 KW["("] _2 KW[")"],
   Anno.2:iter-star-sep             -- _1 KW[","],
   SingleElemAnno                   -- KW["@"] _1 KW["("] _2 KW[")"],
   MarkerAnno                       -- KW["@"] _1,
   ElemValPair                      -- _1 KW["="] _2,
   ElemValArrayInit                 -- KW["{"] _1 KW["}"],
   ElemValArrayInit.1:iter-star-sep -- _1 KW[","],
   ElemValArrayInit                 -- KW["{"] _1 KW[","] KW["}"],
   ElemValArrayInit.1:iter-star-sep -- _1 KW[","],
   FieldDec                         -- _1 _2 _3 _4 KW[";"],
   FieldDec.1:iter-star             -- _1,
   FieldDec.2:iter-star             -- _1,
   FieldDec.4:iter-sep              -- _1 KW[","],
   VarDec                           -- _1,
   VarDec                           -- _1 KW["="] _2,
   ArrayVarDecId                    -- _1 _2,
   ArrayVarDecId.2:iter             -- _1,
   Dim                              -- KW["["] KW["]"],
   ClassOrInterfaceType             -- _1,
   ClassType                        -- _1,
   InterfaceType                    -- _1,
   Member                           -- _1 KW["."] _2,
   ArrayType                        -- _1 KW["["] KW["]"],
   Public                           -- KW["public"],
   Private                          -- KW["private"],
   Native                           -- KW["Native"],
   Id                               -- _1,
   ClassDec                         -- _1 _2,
   ClassBody                        -- V  [V vs=2 [KW["{"] _1] KW["}"]],
   ClassBody.1:iter-star            -- _1,
   ClassDecHead                     -- _1 _2 _3 _4 KW["Class"] _5,
   ClassDecHead.1:iter-star         -- _1,
   ClassDecHead.2:iter-star         -- _1,
   ClassDecHead.3:opt               -- _1,
   ClassDecHead.4:opt               -- _1,
   SuperDec                         -- _1,
   ImplementsDec                    -- _1,
   ImplementsDec.1:iter-sep         -- _1 KW[","],
   Semicolon                        -- KW[";"],
   NewInstance                      -- KW["new"] _1 KW["("] _2 KW[")"] _3,
   NewInstance.2:iter-star-sep      -- _1 KW[","],
   NewInstance.3:opt                -- _1,
   StartApricot                     -- _1
]