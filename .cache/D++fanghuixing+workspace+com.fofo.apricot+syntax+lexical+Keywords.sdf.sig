module(unparameterized("lexical/Keywords"),[],[exports(conc-grammars(conc-grammars(sorts([sort("Keyword")]),lexical-syntax([prod([lit("\"abstract\"")],sort("Keyword"),no-attrs),prod([lit("\"assert\"")],sort("Keyword"),no-attrs),prod([lit("\"boolean\"")],sort("Keyword"),no-attrs),prod([lit("\"Boolean\"")],sort("Keyword"),no-attrs),prod([lit("\"break\"")],sort("Keyword"),no-attrs),prod([lit("\"byte\"")],sort("Keyword"),no-attrs),prod([lit("\"case\"")],sort("Keyword"),no-attrs),prod([lit("\"catch\"")],sort("Keyword"),no-attrs),prod([lit("\"char\"")],sort("Keyword"),no-attrs),prod([lit("\"class\"")],sort("Keyword"),no-attrs),prod([lit("\"Class\"")],sort("Keyword"),no-attrs),prod([lit("\"const\"")],sort("Keyword"),no-attrs),prod([lit("\"continue\"")],sort("Keyword"),no-attrs),prod([lit("\"Controller\"")],sort("Keyword"),no-attrs),prod([lit("\"default\"")],sort("Keyword"),no-attrs),prod([lit("\"do\"")],sort("Keyword"),no-attrs),prod([lit("\"double\"")],sort("Keyword"),no-attrs),prod([lit("\"else\"")],sort("Keyword"),no-attrs),prod([lit("\"enum\"")],sort("Keyword"),no-attrs),prod([lit("\"extends\"")],sort("Keyword"),no-attrs),prod([lit("\"final\"")],sort("Keyword"),no-attrs),prod([lit("\"finally\"")],sort("Keyword"),no-attrs),prod([lit("\"float\"")],sort("Keyword"),no-attrs),prod([lit("\"for\"")],sort("Keyword"),no-attrs),prod([lit("\"goto\"")],sort("Keyword"),no-attrs),prod([lit("\"if\"")],sort("Keyword"),no-attrs),prod([lit("\"implements\"")],sort("Keyword"),no-attrs),prod([lit("\"import\"")],sort("Keyword"),no-attrs),prod([lit("\"in\"")],sort("Keyword"),no-attrs),prod([lit("\"instanceof\"")],sort("Keyword"),no-attrs),prod([lit("\"int\"")],sort("Keyword"),no-attrs),prod([lit("\"Int\"")],sort("Keyword"),no-attrs),prod([lit("\"interface\"")],sort("Keyword"),no-attrs),prod([lit("\"Interface\"")],sort("Keyword"),no-attrs),prod([lit("\"long\"")],sort("Keyword"),no-attrs),prod([lit("\"native\"")],sort("Keyword"),no-attrs),prod([lit("\"new\"")],sort("Keyword"),no-attrs),prod([lit("\"package\"")],sort("Keyword"),no-attrs),prod([lit("\"private\"")],sort("Keyword"),no-attrs),prod([lit("\"protected\"")],sort("Keyword"),no-attrs),prod([lit("\"public\"")],sort("Keyword"),no-attrs),prod([lit("\"real\"")],sort("Keyword"),no-attrs),prod([lit("\"Real\"")],sort("Keyword"),no-attrs),prod([lit("\"return\"")],sort("Keyword"),no-attrs),prod([lit("\"short\"")],sort("Keyword"),no-attrs),prod([lit("\"static\"")],sort("Keyword"),no-attrs),prod([lit("\"strictfp\"")],sort("Keyword"),no-attrs),prod([lit("\"super\"")],sort("Keyword"),no-attrs),prod([lit("\"switch\"")],sort("Keyword"),no-attrs),prod([lit("\"synchronized\"")],sort("Keyword"),no-attrs),prod([lit("\"this\"")],sort("Keyword"),no-attrs),prod([lit("\"throw\"")],sort("Keyword"),no-attrs),prod([lit("\"throws\"")],sort("Keyword"),no-attrs),prod([lit("\"transient\"")],sort("Keyword"),no-attrs),prod([lit("\"try\"")],sort("Keyword"),no-attrs),prod([lit("\"void\"")],sort("Keyword"),no-attrs),prod([lit("\"volatile\"")],sort("Keyword"),no-attrs),prod([lit("\"while\"")],sort("Keyword"),no-attrs)])),lexical-restrictions([follow([lit("\"abstract\""),lit("\"assert\""),lit("\"boolean\""),lit("\"Boolean\""),lit("\"break\""),lit("\"byte\""),lit("\"case\""),lit("\"catch\""),lit("\"char\""),lit("\"class\""),lit("\"Class\""),lit("\"const\""),lit("\"continue\""),lit("\"default\""),lit("\"do\""),lit("\"double\""),lit("\"else\""),lit("\"enum\""),lit("\"extends\""),lit("\"final\""),lit("\"finally\""),lit("\"float\""),lit("\"for\""),lit("\"goto\""),lit("\"if\""),lit("\"implements\""),lit("\"import\""),lit("\"instanceof\""),lit("\"in\""),lit("\"int\""),lit("\"Int\""),lit("\"real\""),lit("\"Real\""),lit("\"interface\""),lit("\"Interface\""),lit("\"long\""),lit("\"native\""),lit("\"new\""),lit("\"package\""),lit("\"private\""),lit("\"protected\""),lit("\"public\""),lit("\"real\""),lit("\"Real\""),lit("\"return\""),lit("\"short\""),lit("\"static\""),lit("\"strictfp\""),lit("\"super\""),lit("\"switch\""),lit("\"synchronized\""),lit("\"this\""),lit("\"throw\""),lit("\"throws\""),lit("\"transient\""),lit("\"try\""),lit("\"void\""),lit("\"volatile\""),lit("\"while\"")],single(char-class(simple-charclass(present(conc(range(short("A"),short("Z")),conc(range(short("a"),short("z")),conc(range(short("0"),short("9")),conc(short("\\_"),short("\\$"))))))))))])))])