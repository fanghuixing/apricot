definition([module(unparameterized("packages/PackageDeclarations"),[imports([module(unparameterized("names/Main")),module(unparameterized("interfaces/Annotations"))])],[exports(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(sorts([sort("WATER"),sort("WATERTOKEN"),sort("WATERTOKENSTART"),sort("WATERTOKENSEPARATOR"),sort("WATERTOKENSTAR")]),lexical-syntax([prod([char-class(simple-charclass(present(conc(range(short("A"),short("Z")),conc(range(short("a"),short("z")),conc(range(short("0"),short("9")),short("\\_")))))))],sort("WATERTOKENSTART"),attrs([term(recover),avoid])),prod([sort("WATERTOKENSTART"),iter-star(char-class(simple-charclass(present(conc(range(short("A"),short("Z")),conc(range(short("a"),short("z")),conc(range(short("0"),short("9")),short("\\_"))))))))],sort("WATERTOKEN"),attrs([])),prod([char-class(comp(simple-charclass(present(conc(range(short("A"),short("Z")),conc(range(short("a"),short("z")),conc(range(short("0"),short("9")),conc(short("\\_"),conc(short("\\ "),conc(short("\\t"),conc(numeric("\\12"),conc(short("\\r"),conc(short("\\n"),short("\\*"))))))))))))))],sort("WATERTOKENSEPARATOR"),attrs([term(recover),avoid])),prod([lit("*")],sort("WATERTOKENSTAR"),attrs([term(recover),avoid])),prod([sort("WATERTOKEN")],sort("WATER"),attrs([])),prod([sort("WATERTOKENSEPARATOR")],sort("WATER"),attrs([])),prod([sort("WATERTOKENSTAR")],sort("WATER"),attrs([])),prod([],sort("WATEREOF"),attrs([])),prod([lit("completion123")],sort("COMPLETIONPREFIX"),attrs([term(completion)])),prod([lit("|#WATERTOKENSTAR|")],sort("WATERTOKENSTAR"),attrs([term(completion)])),prod([lit("|#PackageDec|")],sort("PackageDec"),attrs([term(completion)])),prod([lit("|#ImportDec|")],sort("ImportDec"),attrs([term(completion)])),prod([lit("|#TypeDec|")],sort("TypeDec"),attrs([term(completion)])),prod([lit("|#PackageName|")],sort("PackageName"),attrs([term(completion)])),prod([lit("|#AmbName|")],sort("AmbName"),attrs([term(completion)])),prod([lit("|#TypeName|")],sort("TypeName"),attrs([term(completion)])),prod([lit("|#ExprName|")],sort("ExprName"),attrs([term(completion)])),prod([lit("|#MethodName|")],sort("MethodName"),attrs([term(completion)])),prod([lit("|#PackageOrTypeName|")],sort("PackageOrTypeName"),attrs([term(completion)])),prod([lit("|#MathType|")],sort("MathType"),attrs([term(completion)])),prod([lit("|#PrimType|")],sort("PrimType"),attrs([term(completion)])),prod([lit("|#IntType|")],sort("IntType"),attrs([term(completion)])),prod([lit("|#FloatType|")],sort("FloatType"),attrs([term(completion)])),prod([lit("|#MethodSpec|")],sort("MethodSpec"),attrs([term(completion)])),prod([lit("|#NullLiteral|")],sort("NullLiteral"),attrs([term(completion)])),prod([lit("|#StringLiteral|")],sort("StringLiteral"),attrs([term(completion)])),prod([lit("|#UnicodeEscape|")],sort("UnicodeEscape"),attrs([term(completion)])),prod([lit("|#NamedEscape|")],sort("NamedEscape"),attrs([term(completion)])),prod([lit("|#OctaEscape|")],sort("OctaEscape"),attrs([term(completion)])),prod([lit("|#CharLiteral|")],sort("CharLiteral"),attrs([term(completion)])),prod([lit("|#Bool|")],sort("Bool"),attrs([term(completion)])),prod([lit("|#DeciFloatDigits|")],sort("DeciFloatDigits"),attrs([term(completion)])),prod([lit("|#HexaSignificand|")],sort("HexaSignificand"),attrs([term(completion)])),prod([lit("|#DeciNumeral|")],sort("DeciNumeral"),attrs([term(completion)])),prod([lit("|#ClassLiteral|")],sort("ClassLiteral"),attrs([term(completion)])),prod([lit("|#ArraySubscript|")],sort("ArraySubscript"),attrs([term(completion)])),prod([lit("|#CondMid|")],sort("CondMid"),attrs([term(completion)])),prod([lit("|#FieldAccess|")],sort("FieldAccess"),attrs([term(completion)])),prod([lit("|#ArrayCreationExpr|")],sort("ArrayCreationExpr"),attrs([term(completion)])),prod([lit("|#DimExpr|")],sort("DimExpr"),attrs([term(completion)])),prod([lit("|#AnnoDec|")],sort("AnnoDec"),attrs([term(completion)])),prod([lit("|#AnnoDecHead|")],sort("AnnoDecHead"),attrs([term(completion)])),prod([lit("|#AnnoElemDec|")],sort("AnnoElemDec"),attrs([term(completion)])),prod([lit("|#DefaultVal|")],sort("DefaultVal"),attrs([term(completion)])),prod([lit("|#ConstantDec|")],sort("ConstantDec"),attrs([term(completion)])),prod([lit("|#InterfaceDec|")],sort("InterfaceDec"),attrs([term(completion)])),prod([lit("|#ExtendsInterfaces|")],sort("ExtendsInterfaces"),attrs([term(completion)])),prod([lit("|#InterfaceMemberDec|")],sort("InterfaceMemberDec"),attrs([term(completion)])),prod([lit("|#ConstrHead|")],sort("ConstrHead"),attrs([term(completion)])),prod([lit("|#ConstrBody|")],sort("ConstrBody"),attrs([term(completion)])),prod([lit("|#ConstrInv|")],sort("ConstrInv"),attrs([term(completion)])),prod([lit("|#SwitchBlock|")],sort("SwitchBlock"),attrs([term(completion)])),prod([lit("|#SwitchLabel|")],sort("SwitchLabel"),attrs([term(completion)])),prod([lit("|#Stm|")],sort("Stm"),attrs([term(completion)])),prod([lit("|#CatchClause|")],sort("CatchClause"),attrs([term(completion)])),prod([lit("|#LocalVarDecStm|")],sort("LocalVarDecStm"),attrs([term(completion)])),prod([lit("|#LocalVarDec|")],sort("LocalVarDec"),attrs([term(completion)])),prod([lit("|#Block|")],sort("Block"),attrs([term(completion)])),prod([lit("|#MethodDecHead|")],sort("MethodDecHead"),attrs([term(completion)])),prod([lit("|#ResultType|")],sort("ResultType"),attrs([term(completion)])),prod([lit("|#MethodBody|")],sort("MethodBody"),attrs([term(completion)])),prod([lit("|#ArrayInit|")],sort("ArrayInit"),attrs([term(completion)])),prod([lit("|#Anno|")],sort("Anno"),attrs([term(completion)])),prod([lit("|#ElemValPair|")],sort("ElemValPair"),attrs([term(completion)])),prod([lit("|#ElemVal|")],sort("ElemVal"),attrs([term(completion)])),prod([lit("|#FieldDec|")],sort("FieldDec"),attrs([term(completion)])),prod([lit("|#VarDec|")],sort("VarDec"),attrs([term(completion)])),prod([lit("|#Dim|")],sort("Dim"),attrs([term(completion)])),prod([lit("|#TypeDecSpec|")],sort("TypeDecSpec"),attrs([term(completion)])),prod([lit("|#ArrayType|")],sort("ArrayType"),attrs([term(completion)])),prod([lit("|#Public|")],sort("Public"),attrs([term(completion)])),prod([lit("|#Private|")],sort("Private"),attrs([term(completion)])),prod([lit("|#Native|")],sort("Native"),attrs([term(completion)])),prod([lit("|#Keyword|")],sort("Keyword"),attrs([term(completion)])),prod([lit("|#ID|")],sort("ID"),attrs([term(completion)])),prod([lit("|#ClassBody|")],sort("ClassBody"),attrs([term(completion)])),prod([lit("|#ClassDecHead|")],sort("ClassDecHead"),attrs([term(completion)])),prod([lit("|#Interfaces|")],sort("Interfaces"),attrs([term(completion)])),prod([lit("|#ClassMemberDec|")],sort("ClassMemberDec"),attrs([term(completion)])),prod([lit("|#Expr|")],sort("Expr"),attrs([term(completion)]))])),lexical-restrictions([follow([sort("WATERTOKEN")],single(char-class(simple-charclass(present(conc(range(short("A"),short("Z")),conc(range(short("a"),short("z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([sort("WATERTOKENSTAR")],single(char-class(simple-charclass(present(short("\\/"))))))])),context-free-syntax([prod([sort("WATER")],layout,attrs([term(cons("WATER"))]))])),conc-grammars(conc-grammars(conc-grammars(sorts([sort("WATEREOF")]),lexical-restrictions([follow([sort("WATEREOF")],single(char-class(comp(simple-charclass(absent)))))])),lexical-syntax([prod([],lit("import"),attrs([term(recover),term(cons("INSERTION"))])),prod([],lit("."),attrs([term(recover),term(cons("INSERTION"))])),prod([],lit("class"),attrs([term(recover),term(cons("INSERTION"))])),prod([],lit(":"),attrs([term(recover),term(cons("INSERTION"))])),prod([],lit(";"),attrs([term(recover),term(cons("INSERTION"))])),prod([],lit(")"),attrs([term(recover),term(cons("INSERTION"))])),prod([],lit("]"),attrs([term(recover),term(cons("INSERTION"))])),prod([],lit("}"),attrs([term(recover),term(cons("INSERTION"))])),prod([],lit(","),attrs([term(recover),term(cons("INSERTION"))]))])),syntax([prod([lit("\\\"")],sort("INSERTOPENQUOTE"),attrs([term(recover)])),prod([sort("INSERTOPENQUOTE"),iter-star(sort("StringPart")),lit("\\n")],sort("StringLiteral"),attrs([term(cons("INSERTEND"))])),prod([sort("INSERTOPENQUOTE"),iter-star(sort("StringPart")),sort("WATEREOF")],sort("StringLiteral"),attrs([term(cons("INSERTEND"))])),prod([lit("'")],sort("INSERTOPENQUOTE"),attrs([term(recover)])),prod([sort("INSERTOPENQUOTE"),sort("CharContent"),lit("\\n")],sort("CharLiteral"),attrs([term(cons("INSERTEND"))])),prod([sort("INSERTOPENQUOTE"),sort("CharContent"),sort("WATEREOF")],sort("CharLiteral"),attrs([term(cons("INSERTEND"))]))]))),conc-grammars(sorts([sort("PackageDec")]),context-free-syntax([prod([iter-star(sort("Anno")),lit("package"),sort("PackageName"),lit(";")],sort("PackageDec"),attrs([term(cons("PackageDec"))]))]))))]),module(unparameterized("packages/ImportDeclarations"),[imports([module(unparameterized("lexical/Identifiers")),module(unparameterized("names/Main"))])],[exports(conc-grammars(sorts([sort("ImportDec")]),context-free-syntax([prod([lit("import"),sort("TypeName"),lit(";")],sort("ImportDec"),attrs([term(cons("TypeImportDec"))])),prod([lit("import"),sort("PackageName"),lit("."),lit("*"),lit(";")],sort("ImportDec"),attrs([term(cons("TypeImportOnDemandDec"))])),prod([lit("import"),lit("static"),sort("TypeName"),lit("."),sort("Id"),lit(";")],sort("ImportDec"),attrs([term(cons("StaticImportDec"))])),prod([lit("import"),lit("static"),sort("TypeName"),lit("."),lit("*"),lit(";")],sort("ImportDec"),attrs([term(cons("StaticImportOnDemandDec"))]))])))]),module(unparameterized("packages/TypeDeclarations"),[imports([module(unparameterized("classes/ClassDeclarations")),module(unparameterized("interfaces/InterfaceDeclarations"))])],[exports(conc-grammars(sorts([sort("TypeDec")]),context-free-syntax([prod([sort("ClassDec")],sort("TypeDec"),attrs([])),prod([sort("InterfaceDec")],sort("TypeDec"),attrs([])),prod([lit(";")],sort("TypeDec"),attrs([term(cons("Semicolon"))]))])))]),module(unparameterized("packages/CompilationUnits"),[imports([module(unparameterized("packages/PackageDeclarations")),module(unparameterized("packages/ImportDeclarations")),module(unparameterized("packages/TypeDeclarations"))])],[exports(conc-grammars(sorts([sort("CompilationUnit")]),context-free-syntax([prod([opt(sort("PackageDec")),iter-star(sort("ImportDec")),iter(sort("TypeDec"))],sort("CompilationUnit"),attrs([term(cons("CompilationUnit"))]))])))]),module(unparameterized("packages/Main"),[imports([module(unparameterized("packages/CompilationUnits")),module(unparameterized("packages/ImportDeclarations")),module(unparameterized("packages/PackageDeclarations"))])],[]),module(unparameterized("statements/Main"),[imports([module(unparameterized("statements/Blocks")),module(unparameterized("statements/LocalVariableDeclarations")),module(unparameterized("statements/Statements"))])],[]),module(unparameterized("interfaces/Main"),[imports([module(unparameterized("interfaces/InterfaceDeclarations")),module(unparameterized("interfaces/AnnotationTypes")),module(unparameterized("interfaces/Annotations"))])],[]),module(unparameterized("names/Main"),[imports([module(unparameterized("lexical/Identifiers"))])],[exports(conc-grammars(conc-grammars(conc-grammars(sorts([sort("PackageName")]),context-free-syntax([prod([iter-sep(sort("Id"),lit("."))],sort("PackageName"),attrs([term(cons("PackageName"))]))])),sorts([sort("TypeName"),sort("ExprName"),sort("MethodName"),sort("PackageOrTypeName"),sort("AmbName")])),context-free-syntax([prod([sort("Id")],sort("AmbName"),attrs([term(cons("AmbName"))])),prod([sort("AmbName"),lit("."),sort("Id")],sort("AmbName"),attrs([term(cons("AmbName"))])),prod([sort("Id")],sort("TypeName"),attrs([term(cons("TypeName"))])),prod([sort("PackageOrTypeName"),lit("."),sort("Id")],sort("TypeName"),attrs([term(cons("TypeName"))])),prod([sort("Id")],sort("ExprName"),attrs([term(cons("ExprName"))])),prod([sort("AmbName"),lit("."),sort("Id")],sort("ExprName"),attrs([term(cons("ExprName"))])),prod([sort("Id")],sort("MethodName"),attrs([term(cons("MethodName"))])),prod([sort("AmbName"),lit("."),sort("Id")],sort("MethodName"),attrs([term(cons("MethodName"))])),prod([sort("Id")],sort("PackageOrTypeName"),attrs([term(cons("PackageOrTypeName"))])),prod([sort("PackageOrTypeName"),lit("."),sort("Id")],sort("PackageOrTypeName"),attrs([term(cons("PackageOrTypeName"))]))])))]),module(unparameterized("lexical/WhiteSpace"),[],[exports(conc-grammars(lexical-syntax([prod([char-class(simple-charclass(present(conc(short("\\ "),conc(short("\\t"),conc(numeric("\\12"),conc(short("\\r"),short("\\n"))))))))],layout,attrs([]))]),context-free-restrictions([follow([opt(layout)],single(char-class(simple-charclass(present(conc(short("\\ "),conc(short("\\t"),conc(numeric("\\12"),conc(short("\\n"),short("\\r"))))))))))])))]),module(unparameterized("lexical/LineTerminators"),[],[exports(conc-grammars(conc-grammars(conc-grammars(conc-grammars(sorts([sort("LineTerminator"),sort("CarriageReturn"),sort("EndOfFile")]),lexical-syntax([prod([char-class(simple-charclass(present(short("\\n"))))],sort("LineTerminator"),attrs([])),prod([char-class(simple-charclass(present(short("\\r")))),char-class(simple-charclass(present(short("\\n"))))],sort("LineTerminator"),attrs([])),prod([sort("CarriageReturn")],sort("LineTerminator"),attrs([])),prod([sort("EndOfFile")],sort("LineTerminator"),attrs([])),prod([char-class(simple-charclass(present(short("\\r"))))],sort("CarriageReturn"),attrs([]))])),lexical-restrictions([follow([sort("CarriageReturn")],single(char-class(simple-charclass(present(short("\\n"))))))])),lexical-syntax([prod([],sort("EndOfFile"),attrs([]))])),lexical-restrictions([follow([sort("EndOfFile")],single(char-class(comp(simple-charclass(absent)))))])))]),module(unparameterized("lexical/Main"),[imports([module(unparameterized("lexical/Identifiers")),module(unparameterized("lexical/Keywords")),module(unparameterized("lexical/LineTerminators")),module(unparameterized("lexical/WhiteSpace")),module(unparameterized("lexical/literals/Main"))])],[]),module(unparameterized("arrays/Main"),[imports([module(unparameterized("arrays/ArrayInitializers"))])],[]),module(unparameterized("classes/Main"),[imports([module(unparameterized("classes/ClassDeclarations"))])],[]),module(unparameterized("types/MathTypes"),[],[exports(conc-grammars(sorts([sort("MathType")]),context-free-syntax([prod([lit("Int")],sort("MathType"),attrs([term(cons("IntMath"))])),prod([lit("Real")],sort("MathType"),attrs([term(cons("RealMath"))]))])))]),module(unparameterized("types/PrimitiveTypes"),[],[exports(conc-grammars(sorts([sort("PrimType"),sort("NumType"),sort("IntType"),sort("FloatType")]),context-free-syntax([prod([sort("NumType")],sort("PrimType"),attrs([])),prod([lit("boolean")],sort("PrimType"),attrs([term(cons("Boolean"))])),prod([sort("IntType")],sort("NumType"),attrs([])),prod([sort("FloatType")],sort("NumType"),attrs([])),prod([lit("int")],sort("IntType"),attrs([term(cons("int"))])),prod([lit("real")],sort("FloatType"),attrs([term(cons("real"))]))])))]),module(unparameterized("types/Main"),[imports([module(unparameterized("types/PrimitiveTypes")),module(unparameterized("types/ReferenceTypes")),module(unparameterized("types/MathTypes"))])],[exports(conc-grammars(sorts([sort("Type")]),context-free-syntax([prod([sort("PrimType")],sort("Type"),attrs([])),prod([sort("RefType")],sort("Type"),attrs([])),prod([sort("MathType")],sort("Type"),attrs([]))])))]),module(unparameterized("expressions/MethodInvocation"),[imports([module(unparameterized("expressions/Main"))])],[exports(conc-grammars(conc-grammars(sorts([sort("MethodSpec")]),context-free-syntax([prod([sort("MethodSpec"),lit("("),iter-star-sep(sort("Expr"),lit(",")),lit(")")],sort("Expr"),attrs([term(cons("Invoke"))])),prod([sort("MethodName")],sort("MethodSpec"),attrs([term(cons("Method"))])),prod([sort("Expr"),lit("."),sort("Id")],sort("MethodSpec"),attrs([term(cons("Method"))])),prod([lit("super"),lit("."),sort("Id")],sort("MethodSpec"),attrs([term(cons("SuperMethod"))])),prod([sort("TypeName"),lit("."),lit("super"),lit("."),sort("Id")],sort("MethodSpec"),attrs([term(cons("QSuperMethod"))])),prod([sort("AmbName"),lit("."),sort("Id")],sort("MethodSpec"),attrs([term(cons("GenericMethod"))]))])),context-free-priorities([chain([simple-group(prod([sort("Expr"),lit("."),sort("Id")],sort("MethodSpec"),attrs([]))),simple-group(prod([sort("ExprName")],sort("Expr"),attrs([])))])])))]),module(unparameterized("expressions/Postfix"),[imports([module(unparameterized("expressions/Main"))])],[exports(context-free-syntax([prod([sort("ExprName")],sort("Expr"),attrs([])),prod([sort("Expr"),lit("++")],sort("Expr"),attrs([term(cons("PostIncr"))])),prod([sort("Expr"),lit("--")],sort("Expr"),attrs([term(cons("PostDecr"))]))]))]),module(unparameterized("lexical/literals/NullLiteral"),[],[exports(conc-grammars(sorts([sort("NullLiteral")]),context-free-syntax([prod([lit("null")],sort("NullLiteral"),attrs([term(cons("Null"))])),prod([lit("Null")],sort("NullLiteral"),attrs([term(cons("Null"))]))])))]),module(unparameterized("lexical/literals/StringLiterals"),[imports([module(unparameterized("lexical/literals/EscapeSequences")),module(unparameterized("lexical/UnicodeEscapes"))])],[exports(conc-grammars(conc-grammars(sorts([sort("StringLiteral"),sort("StringPart"),sort("StringChars"),sort("FooStringChars")]),syntax([prod([sort("StringLiteral")],cf(sort("StringLiteral")),attrs([])),prod([lit("\\\""),iter-star(sort("StringPart")),lit("\\\"")],sort("StringLiteral"),attrs([term(cons("String"))])),prod([sort("StringChars")],sort("StringPart"),attrs([term(cons("Chars"))])),prod([sort("UnicodeEscape")],sort("StringPart"),attrs([])),prod([sort("EscapeSeq")],sort("StringPart"),attrs([])),prod([lex(sort("FooStringChars"))],sort("StringChars"),attrs([])),prod([iter(char-class(comp(simple-charclass(present(conc(short("\\\""),conc(short("\\\\"),conc(short("\\n"),numeric("\\13")))))))))],lex(sort("FooStringChars")),attrs([]))])),restrictions([follow([sort("StringChars")],single(char-class(comp(simple-charclass(present(conc(short("\\\""),conc(short("\\\\"),conc(short("\\n"),numeric("\\13"))))))))))])))]),module(unparameterized("lexical/UnicodeEscapes"),[],[exports(conc-grammars(sorts([sort("UnicodeEscape")]),syntax([prod([lit("\\\\"),iter(char-class(simple-charclass(present(short("u"))))),char-class(simple-charclass(present(conc(range(short("0"),short("9")),conc(range(short("a"),short("f")),range(short("A"),short("F"))))))),char-class(simple-charclass(present(conc(range(short("0"),short("9")),conc(range(short("a"),short("f")),range(short("A"),short("F"))))))),char-class(simple-charclass(present(conc(range(short("0"),short("9")),conc(range(short("a"),short("f")),range(short("A"),short("F"))))))),char-class(simple-charclass(present(conc(range(short("0"),short("9")),conc(range(short("a"),short("f")),range(short("A"),short("F")))))))],sort("UnicodeEscape"),attrs([term(cons("UnicodeEscape"))]))])))]),module(unparameterized("lexical/literals/EscapeSequences"),[imports([])],[exports(conc-grammars(conc-grammars(sorts([sort("EscapeSeq"),sort("NamedEscape"),sort("OctaEscape"),sort("LastOcta")]),syntax([prod([sort("OctaEscape")],sort("EscapeSeq"),attrs([])),prod([sort("NamedEscape")],sort("EscapeSeq"),attrs([])),prod([lit("\\\\"),char-class(simple-charclass(present(conc(short("b"),conc(short("t"),conc(short("n"),conc(short("f"),conc(short("r"),conc(short("\\\""),conc(short("\\'"),short("\\\\")))))))))))],sort("NamedEscape"),attrs([term(cons("NamedEscape"))])),prod([lit("\\\\"),sort("LastOcta")],sort("OctaEscape"),attrs([term(cons("OctaEscape1"))])),prod([lit("\\\\"),char-class(simple-charclass(present(range(short("0"),short("3"))))),sort("LastOcta")],sort("OctaEscape"),attrs([term(cons("OctaEscape2"))])),prod([lit("\\\\"),char-class(simple-charclass(present(range(short("4"),short("7"))))),char-class(simple-charclass(present(range(short("0"),short("7")))))],sort("OctaEscape"),attrs([term(cons("OctaEscape2"))])),prod([lit("\\\\"),char-class(simple-charclass(present(range(short("0"),short("3"))))),char-class(simple-charclass(present(range(short("0"),short("7"))))),char-class(simple-charclass(present(range(short("0"),short("7")))))],sort("OctaEscape"),attrs([term(cons("OctaEscape3"))])),prod([char-class(simple-charclass(present(range(short("0"),short("7")))))],sort("LastOcta"),attrs([]))])),restrictions([follow([sort("LastOcta")],single(char-class(simple-charclass(present(range(short("0"),short("7")))))))])))]),module(unparameterized("lexical/literals/CharacterLiterals"),[imports([module(unparameterized("lexical/literals/EscapeSequences")),module(unparameterized("lexical/UnicodeEscapes"))])],[exports(conc-grammars(sorts([sort("CharLiteral"),sort("CharContent"),sort("SingleChar")]),syntax([prod([sort("CharLiteral")],cf(sort("CharLiteral")),attrs([])),prod([lit("'"),sort("CharContent"),lit("'")],sort("CharLiteral"),attrs([term(cons("Char"))])),prod([sort("SingleChar")],sort("CharContent"),attrs([term(cons("Single"))])),prod([sort("UnicodeEscape")],sort("CharContent"),attrs([])),prod([sort("EscapeSeq")],sort("CharContent"),attrs([])),prod([char-class(comp(simple-charclass(present(conc(short("\\r"),conc(short("\\n"),conc(short("\\'"),short("\\\\"))))))))],sort("SingleChar"),attrs([]))])))]),module(unparameterized("lexical/literals/BooleanLiterals"),[],[exports(conc-grammars(sorts([sort("Bool"),sort("BoolLiteral")]),context-free-syntax([prod([sort("Bool")],sort("BoolLiteral"),attrs([term(cons("Bool"))])),prod([lit("true")],sort("Bool"),attrs([term(cons("True"))])),prod([lit("false")],sort("Bool"),attrs([term(cons("False"))])),prod([lit("True")],sort("Bool"),attrs([term(cons("True"))])),prod([lit("False")],sort("Bool"),attrs([term(cons("False"))]))])))]),module(unparameterized("lexical/literals/FloatingPointLiterals"),[],[exports(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(sorts([sort("FloatLiteral"),sort("DeciFloatLiteral"),sort("HexaFloatLiteral")]),context-free-syntax([prod([sort("DeciFloatLiteral")],sort("FloatLiteral"),attrs([term(cons("Float"))])),prod([sort("HexaFloatLiteral")],sort("FloatLiteral"),attrs([term(cons("Float"))]))])),lexical-syntax([prod([sort("DeciFloatNumeral"),opt(char-class(simple-charclass(present(conc(short("f"),conc(short("F"),conc(short("d"),short("D"))))))))],sort("DeciFloatLiteral"),attrs([])),prod([sort("HexaFloatNumeral"),opt(char-class(simple-charclass(present(conc(short("f"),conc(short("F"),conc(short("d"),short("D"))))))))],sort("HexaFloatLiteral"),attrs([])),prod([iter(char-class(simple-charclass(present(range(short("0"),short("9"))))))],sort("DeciFloatLiteral"),attrs([reject]))])),lexical-restrictions([follow([sort("DeciFloatLiteral")],single(char-class(simple-charclass(present(conc(short("f"),conc(short("F"),conc(short("d"),short("D"))))))))),follow([sort("HexaFloatLiteral")],single(char-class(simple-charclass(present(conc(short("f"),conc(short("F"),conc(short("d"),short("D")))))))))])),sorts([sort("DeciFloatNumeral"),sort("DeciFloatDigits"),sort("DeciFloatExponentPart")])),lexical-syntax([prod([sort("DeciFloatDigits"),opt(sort("DeciFloatExponentPart"))],sort("DeciFloatNumeral"),attrs([])),prod([iter-star(char-class(simple-charclass(present(range(short("0"),short("9")))))),lit("."),iter-star(char-class(simple-charclass(present(range(short("0"),short("9"))))))],sort("DeciFloatDigits"),attrs([])),prod([lit(".")],sort("DeciFloatDigits"),attrs([reject])),prod([iter(char-class(simple-charclass(present(range(short("0"),short("9"))))))],sort("DeciFloatDigits"),attrs([])),prod([char-class(simple-charclass(present(conc(short("e"),short("E"))))),sort("SignedInteger")],sort("DeciFloatExponentPart"),attrs([])),prod([opt(char-class(simple-charclass(present(conc(short("\\+"),short("\\-")))))),iter(char-class(simple-charclass(present(range(short("0"),short("9"))))))],sort("SignedInteger"),attrs([]))])),lexical-restrictions([follow([sort("DeciFloatDigits")],single(char-class(simple-charclass(present(range(short("0"),short("9"))))))),follow([sort("DeciFloatExponentPart")],single(char-class(simple-charclass(present(range(short("0"),short("9")))))))])),sorts([sort("HexaFloatNumeral"),sort("HexaSignificand"),sort("BinaryExponent"),sort("SignedInteger")])),lexical-syntax([prod([sort("HexaSignificand"),sort("BinaryExponent")],sort("HexaFloatNumeral"),attrs([])),prod([char-class(simple-charclass(present(short("0")))),char-class(simple-charclass(present(conc(short("x"),short("X"))))),iter(char-class(simple-charclass(present(conc(range(short("0"),short("9")),conc(range(short("a"),short("f")),range(short("A"),short("F"))))))))],sort("HexaSignificand"),attrs([])),prod([char-class(simple-charclass(present(short("0")))),char-class(simple-charclass(present(conc(short("x"),short("X"))))),iter-star(char-class(simple-charclass(present(conc(range(short("0"),short("9")),conc(range(short("a"),short("f")),range(short("A"),short("F")))))))),lit("."),iter-star(char-class(simple-charclass(present(conc(range(short("0"),short("9")),conc(range(short("a"),short("f")),range(short("A"),short("F"))))))))],sort("HexaSignificand"),attrs([])),prod([char-class(simple-charclass(present(short("0")))),char-class(simple-charclass(present(conc(short("x"),short("X"))))),lit(".")],sort("HexaSignificand"),attrs([reject])),prod([char-class(simple-charclass(present(conc(short("p"),short("P"))))),sort("SignedInteger")],sort("BinaryExponent"),attrs([]))])),lexical-restrictions([follow([sort("HexaSignificand")],single(char-class(simple-charclass(present(conc(range(short("0"),short("9")),conc(range(short("a"),short("f")),range(short("A"),short("F"))))))))),follow([sort("SignedInteger")],single(char-class(simple-charclass(present(range(short("0"),short("9")))))))])))]),module(unparameterized("lexical/literals/IntegerLiterals"),[],[exports(conc-grammars(conc-grammars(conc-grammars(sorts([sort("IntLiteral"),sort("DeciLiteral"),sort("HexaLiteral"),sort("OctaLiteral"),sort("DeciNumeral"),sort("HexaNumeral"),sort("OctaNumeral")]),context-free-syntax([prod([sort("DeciLiteral")],sort("IntLiteral"),attrs([term(cons("Deci"))])),prod([sort("HexaLiteral")],sort("IntLiteral"),attrs([term(cons("Hexa"))])),prod([sort("OctaLiteral")],sort("IntLiteral"),attrs([term(cons("Octa"))]))])),lexical-syntax([prod([sort("DeciNumeral"),opt(char-class(simple-charclass(present(conc(short("l"),short("L"))))))],sort("DeciLiteral"),attrs([])),prod([sort("HexaNumeral"),opt(char-class(simple-charclass(present(conc(short("l"),short("L"))))))],sort("HexaLiteral"),attrs([])),prod([sort("OctaNumeral"),opt(char-class(simple-charclass(present(conc(short("l"),short("L"))))))],sort("OctaLiteral"),attrs([])),prod([lit("0")],sort("DeciNumeral"),attrs([])),prod([char-class(simple-charclass(present(range(short("1"),short("9"))))),iter-star(char-class(simple-charclass(present(range(short("0"),short("9"))))))],sort("DeciNumeral"),attrs([])),prod([char-class(simple-charclass(present(short("0")))),char-class(simple-charclass(present(conc(short("x"),short("X"))))),iter(char-class(simple-charclass(present(conc(range(short("0"),short("9")),conc(range(short("a"),short("f")),range(short("A"),short("F"))))))))],sort("HexaNumeral"),attrs([])),prod([char-class(simple-charclass(present(short("0")))),iter(char-class(simple-charclass(present(range(short("0"),short("7"))))))],sort("OctaNumeral"),attrs([]))])),lexical-restrictions([follow([sort("DeciNumeral")],single(char-class(simple-charclass(present(conc(range(short("0"),short("9")),conc(short("\\."),conc(short("f"),conc(short("F"),conc(short("d"),short("D"))))))))))),follow([sort("HexaNumeral")],single(char-class(simple-charclass(present(conc(range(short("0"),short("9")),conc(range(short("a"),short("f")),range(short("A"),short("F"))))))))),follow([sort("OctaNumeral")],single(char-class(simple-charclass(present(range(short("0"),short("7"))))))),follow([sort("DeciLiteral")],single(char-class(simple-charclass(present(conc(short("l"),short("L"))))))),follow([sort("HexaLiteral")],single(char-class(simple-charclass(present(conc(short("l"),short("L"))))))),follow([sort("OctaLiteral")],single(char-class(simple-charclass(present(conc(short("l"),short("L")))))))])))]),module(unparameterized("lexical/literals/Main"),[imports([module(unparameterized("lexical/literals/IntegerLiterals")),module(unparameterized("lexical/literals/FloatingPointLiterals")),module(unparameterized("lexical/literals/BooleanLiterals")),module(unparameterized("lexical/literals/CharacterLiterals")),module(unparameterized("lexical/literals/StringLiterals")),module(unparameterized("lexical/literals/NullLiteral"))])],[]),module(unparameterized("expressions/Primary"),[imports([module(unparameterized("lexical/literals/Main")),module(unparameterized("names/Main")),module(unparameterized("expressions/Main"))])],[exports(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(sorts([sort("Literal")]),context-free-syntax([prod([sort("Literal")],sort("Expr"),attrs([term(cons("Lit"))])),prod([sort("IntLiteral")],sort("Literal"),attrs([])),prod([sort("FloatLiteral")],sort("Literal"),attrs([])),prod([sort("BoolLiteral")],sort("Literal"),attrs([])),prod([sort("CharLiteral")],sort("Literal"),attrs([])),prod([sort("StringLiteral")],sort("Literal"),attrs([])),prod([sort("NullLiteral")],sort("Literal"),attrs([]))])),sorts([sort("ClassLiteral")])),context-free-syntax([prod([sort("ClassLiteral")],sort("Literal"),attrs([])),prod([sort("Type"),lit("."),lit("class")],sort("ClassLiteral"),attrs([term(cons("Class"))])),prod([lit("void"),lit("."),lit("class")],sort("ClassLiteral"),attrs([term(cons("VoidClass"))]))])),context-free-syntax([prod([lit("this")],sort("Expr"),attrs([term(cons("This"))])),prod([sort("TypeName"),lit("."),lit("this")],sort("Expr"),attrs([term(cons("QThis"))]))])),context-free-syntax([prod([lit("("),sort("Expr"),lit(")")],sort("Expr"),attrs([bracket]))])))]),module(unparameterized("expressions/ArrayAccess"),[imports([module(unparameterized("expressions/Main"))])],[exports(conc-grammars(sorts([sort("ArrayAccess"),sort("ArraySubscript")]),context-free-syntax([prod([sort("ArrayAccess")],sort("Expr"),attrs([])),prod([sort("Expr"),sort("ArraySubscript")],sort("ArrayAccess"),attrs([term(cons("ArrayAccess"))])),prod([lit("["),sort("Expr"),lit("]")],sort("ArraySubscript"),attrs([bracket])),prod([sort("ArrayCreationExpr"),sort("ArraySubscript")],sort("ArrayAccess"),attrs([reject]))])))]),module(unparameterized("expressions/AssignmentOperators"),[imports([module(unparameterized("expressions/Main"))])],[exports(conc-grammars(sorts([sort("LHS")]),context-free-syntax([prod([sort("LHS"),lit("="),sort("Expr")],sort("Expr"),attrs([term(cons("Assign"))])),prod([sort("LHS"),lit("*="),sort("Expr")],sort("Expr"),attrs([term(cons("AssignMul"))])),prod([sort("LHS"),lit("/="),sort("Expr")],sort("Expr"),attrs([term(cons("AssignDiv"))])),prod([sort("LHS"),lit("%="),sort("Expr")],sort("Expr"),attrs([term(cons("AssignRemain"))])),prod([sort("LHS"),lit("+="),sort("Expr")],sort("Expr"),attrs([term(cons("AssignPlus"))])),prod([sort("LHS"),lit("-="),sort("Expr")],sort("Expr"),attrs([term(cons("AssignMinus"))])),prod([sort("ExprName")],sort("LHS"),attrs([])),prod([sort("FieldAccess")],sort("LHS"),attrs([])),prod([sort("ArrayAccess")],sort("LHS"),attrs([]))])))]),module(unparameterized("expressions/BinaryOperators"),[imports([module(unparameterized("expressions/Main")),module(unparameterized("types/Main"))])],[exports(conc-grammars(sorts([sort("CondMid")]),context-free-syntax([prod([sort("Expr"),lit("instanceof"),sort("RefType")],sort("Expr"),attrs([term(cons("InstanceOf"))])),prod([sort("Expr"),lit("*"),sort("Expr")],sort("Expr"),attrs([assoc(left),term(cons("Mul"))])),prod([sort("Expr"),lit("/"),sort("Expr")],sort("Expr"),attrs([assoc(left),term(cons("Div"))])),prod([sort("Expr"),lit("%"),sort("Expr")],sort("Expr"),attrs([assoc(left),term(cons("Remain"))])),prod([sort("Expr"),lit("+"),sort("Expr")],sort("Expr"),attrs([assoc(left),term(cons("Plus"))])),prod([sort("Expr"),lit("-"),sort("Expr")],sort("Expr"),attrs([assoc(left),term(cons("Minus"))])),prod([sort("Expr"),lit("<"),sort("Expr")],sort("Expr"),attrs([assoc(left),term(cons("Lt"))])),prod([sort("Expr"),lit(">"),sort("Expr")],sort("Expr"),attrs([assoc(left),term(cons("Gt"))])),prod([sort("Expr"),lit("<="),sort("Expr")],sort("Expr"),attrs([assoc(left),term(cons("LtEq"))])),prod([sort("Expr"),lit(">="),sort("Expr")],sort("Expr"),attrs([assoc(left),term(cons("GtEq"))])),prod([sort("Expr"),lit("=="),sort("Expr")],sort("Expr"),attrs([assoc(left),term(cons("Eq"))])),prod([sort("Expr"),lit("!="),sort("Expr")],sort("Expr"),attrs([assoc(left),term(cons("NotEq"))])),prod([sort("Expr"),lit("||"),sort("Expr")],sort("Expr"),attrs([assoc(left),term(cons("Synchronous"))])),prod([sort("Expr"),lit("~"),sort("Expr")],sort("Expr"),attrs([assoc(left),term(cons("Asynchronous"))])),prod([sort("Expr"),lit("in"),sort("Expr")],sort("Expr"),attrs([assoc(left),term(cons("LogicIn"))])),prod([sort("Expr"),lit("and"),sort("Expr")],sort("Expr"),attrs([assoc(left),term(cons("LogicAnd"))])),prod([sort("Expr"),lit("or"),sort("Expr")],sort("Expr"),attrs([assoc(left),term(cons("LogicOr"))])),prod([sort("Expr"),lit("xor"),sort("Expr")],sort("Expr"),attrs([assoc(left),term(cons("LogicXOR"))])),prod([sort("Expr"),sort("CondMid"),sort("Expr")],sort("Expr"),attrs([assoc(right),term(cons("Cond"))])),prod([lit("?"),sort("Expr"),lit(":")],sort("CondMid"),attrs([bracket]))])))]),module(unparameterized("expressions/UnaryOperators"),[imports([module(unparameterized("expressions/Main"))])],[exports(context-free-syntax([prod([lit("+"),sort("Expr")],sort("Expr"),attrs([term(cons("Plus"))])),prod([lit("-"),sort("Expr")],sort("Expr"),attrs([term(cons("Minus"))])),prod([lit("++"),sort("Expr")],sort("Expr"),attrs([term(cons("PreIncr"))])),prod([lit("--"),sort("Expr")],sort("Expr"),attrs([term(cons("PreDecr"))])),prod([lit("!"),sort("Expr")],sort("Expr"),attrs([term(cons("Not"))])),prod([lit("("),sort("PrimType"),lit(")"),sort("Expr")],sort("Expr"),attrs([term(cons("CastPrim"))])),prod([lit("("),sort("RefType"),lit(")"),sort("Expr")],sort("Expr"),attrs([term(cons("CastRef"))]))]))]),module(unparameterized("expressions/FieldAccess"),[imports([module(unparameterized("expressions/Main"))])],[exports(conc-grammars(conc-grammars(sorts([sort("FieldAccess")]),context-free-syntax([prod([sort("FieldAccess")],sort("Expr"),attrs([]))])),context-free-syntax([prod([sort("Expr"),lit("."),sort("Id")],sort("FieldAccess"),attrs([term(cons("Field"))])),prod([sort("ExprName"),lit("."),sort("Id")],sort("FieldAccess"),attrs([reject])),prod([lit("super"),lit("."),sort("Id")],sort("FieldAccess"),attrs([term(cons("SuperField"))])),prod([sort("TypeName"),lit("."),lit("super"),lit("."),sort("Id")],sort("FieldAccess"),attrs([term(cons("QSuperField"))]))])))]),module(unparameterized("expressions/ArrayCreation"),[imports([module(unparameterized("expressions/Main"))])],[exports(conc-grammars(sorts([sort("ArrayCreationExpr"),sort("ArrayBaseType"),sort("Dim"),sort("DimExpr")]),context-free-syntax([prod([sort("ArrayCreationExpr")],sort("Expr"),attrs([])),prod([lit("new"),sort("ArrayBaseType"),iter(sort("DimExpr")),iter-star(sort("Dim"))],sort("ArrayCreationExpr"),attrs([term(cons("NewArray"))])),prod([lit("new"),sort("ArrayBaseType"),iter(sort("Dim")),sort("ArrayInit")],sort("ArrayCreationExpr"),attrs([term(cons("NewArray"))])),prod([sort("PrimType")],sort("ArrayBaseType"),attrs([])),prod([sort("TypeName")],sort("ArrayBaseType"),attrs([])),prod([lit("["),sort("Expr"),lit("]")],sort("DimExpr"),attrs([term(cons("Dim"))])),prod([lit("["),lit("]")],sort("Dim"),attrs([term(cons("Dim"))]))])))]),module(unparameterized("interfaces/AnnotationTypes"),[imports([module(unparameterized("lexical/Identifiers")),module(unparameterized("classes/ClassDeclarations")),module(unparameterized("interfaces/InterfaceDeclarations")),module(unparameterized("interfaces/ConstantDeclarations")),module(unparameterized("interfaces/Annotations"))])],[exports(conc-grammars(conc-grammars(conc-grammars(sorts([sort("AnnoDec"),sort("AnnoDecHead")]),context-free-syntax([prod([sort("AnnoDecHead"),lit("{"),iter-star(sort("AnnoElemDec")),lit("}")],sort("AnnoDec"),attrs([term(cons("AnnoDec"))])),prod([iter-star(sort("Anno")),lit("@"),lit("interface"),sort("Id")],sort("AnnoDecHead"),attrs([term(cons("AnnoDecHead"))])),prod([iter-star(sort("InterfaceMod")),lit("@"),lit("interface"),sort("Id")],sort("AnnoDecHead"),attrs([term(cons("AnnoDecHead"))]))])),sorts([sort("AnnoElemDec"),sort("DefaultVal")])),context-free-syntax([prod([sort("ConstantDec")],sort("AnnoElemDec"),attrs([])),prod([sort("ClassDec")],sort("AnnoElemDec"),attrs([])),prod([sort("InterfaceDec")],sort("AnnoElemDec"),attrs([])),prod([sort("AnnoDec")],sort("AnnoElemDec"),attrs([])),prod([lit(";")],sort("AnnoElemDec"),attrs([term(cons("Semicolon"))])),prod([lit("default"),sort("ElemVal")],sort("DefaultVal"),attrs([term(cons("DefaultVal"))]))])))]),module(unparameterized("interfaces/ConstantDeclarations"),[imports([module(unparameterized("lexical/Modifiers")),module(unparameterized("types/Main")),module(unparameterized("classes/MethodDeclarations")),module(unparameterized("interfaces/Annotations"))])],[exports(conc-grammars(sorts([sort("ConstantDec"),sort("ConstantMod")]),context-free-syntax([prod([iter-star(sort("Anno")),sort("Type"),iter-sep(sort("VarDec"),lit(",")),lit(";")],sort("ConstantDec"),attrs([term(cons("ConstantDec"))])),prod([iter-star(sort("ConstantMod")),sort("Type"),iter-sep(sort("VarDec"),lit(",")),lit(";")],sort("ConstantDec"),attrs([term(cons("ConstantDec"))])),prod([sort("Public")],sort("ConstantMod"),attrs([]))])))]),module(unparameterized("interfaces/InterfaceDeclarations"),[imports([module(unparameterized("lexical/Identifiers")),module(unparameterized("lexical/Modifiers")),module(unparameterized("names/Main")),module(unparameterized("types/Main")),module(unparameterized("classes/ClassDeclarations")),module(unparameterized("classes/MethodDeclarations")),module(unparameterized("interfaces/ConstantDeclarations")),module(unparameterized("interfaces/AnnotationTypes")),module(unparameterized("interfaces/Annotations"))])],[exports(conc-grammars(conc-grammars(conc-grammars(sorts([sort("InterfaceDec"),sort("InterfaceDecHead"),sort("ExtendsInterfaces"),sort("InterfaceMemberDec"),sort("InterfaceMod")]),context-free-syntax([prod([sort("AnnoDec")],sort("InterfaceDec"),attrs([])),prod([sort("InterfaceDecHead"),lit("{"),iter-star(sort("InterfaceMemberDec")),lit("}")],sort("InterfaceDec"),attrs([term(cons("InterfaceDec"))])),prod([iter-star(sort("Anno")),opt(sort("ExtendsInterfaces")),sort("Id")],sort("InterfaceDecHead"),attrs([term(cons("InterfaceDecHead"))])),prod([opt(sort("ExtendsInterfaces")),sort("Id")],sort("InterfaceDecHead"),attrs([term(cons("InterfaceDecHead"))])),prod([iter-star(sort("InterfaceMod")),lit("Interface"),iter-sep(sort("InterfaceType"),lit(","))],sort("ExtendsInterfaces"),attrs([term(cons("ExtendsInterfaces"))]))])),context-free-syntax([prod([sort("ConstantDec")],sort("InterfaceMemberDec"),attrs([])),prod([sort("ClassDec")],sort("InterfaceMemberDec"),attrs([])),prod([sort("InterfaceDec")],sort("InterfaceMemberDec"),attrs([])),prod([lit(";")],sort("InterfaceMemberDec"),attrs([term(cons("Semicolon"))]))])),context-free-syntax([prod([sort("Public")],sort("InterfaceMod"),attrs([])),prod([sort("Private")],sort("InterfaceMod"),attrs([]))])))]),module(unparameterized("classes/ConstructorDeclarations"),[imports([module(unparameterized("lexical/Identifiers")),module(unparameterized("lexical/Modifiers")),module(unparameterized("interfaces/Annotations")),module(unparameterized("statements/Main")),module(unparameterized("expressions/Main"))])],[exports(conc-grammars(conc-grammars(conc-grammars(sorts([sort("ConstrDec"),sort("ConstrBody"),sort("ConstrHead"),sort("ConstrInv")]),context-free-syntax([prod([sort("ConstrHead"),sort("ConstrBody")],sort("ConstrDec"),attrs([term(cons("ConstrDec"))])),prod([iter-star(sort("Anno")),iter-star(sort("ConstrMod")),sort("Id"),lit("("),iter-star-sep(sort("FormalParam"),lit(",")),lit(")")],sort("ConstrHead"),attrs([term(cons("ConstrDecHead"))])),prod([lit("{"),opt(sort("ConstrInv")),iter-star(sort("BlockStm")),lit("}")],sort("ConstrBody"),attrs([term(cons("ConstrBody"))])),prod([lit("this"),lit("("),iter-star-sep(sort("Expr"),lit(",")),lit(")"),lit(";")],sort("ConstrInv"),attrs([term(cons("AltConstrInv"))])),prod([lit("super"),lit("("),iter-star-sep(sort("Expr"),lit(",")),lit(")"),lit(";")],sort("ConstrInv"),attrs([term(cons("SuperConstrInv"))])),prod([sort("Expr"),lit("."),lit("super"),lit("("),iter-star-sep(sort("Expr"),lit(",")),lit(")"),lit(";")],sort("ConstrInv"),attrs([term(cons("QSuperConstrInv"))]))])),sorts([sort("ConstrMod")])),context-free-syntax([prod([sort("Public")],sort("ConstrMod"),attrs([])),prod([sort("Private")],sort("ConstrMod"),attrs([]))])))]),module(unparameterized("classes/InstanceInitializers"),[imports([module(unparameterized("statements/Blocks"))])],[exports(conc-grammars(sorts([sort("InstanceInit")]),context-free-syntax([prod([sort("Block")],sort("InstanceInit"),attrs([term(cons("InstanceInit"))]))])))]),module(unparameterized("statements/Statements"),[imports([module(unparameterized("statements/LocalVariableDeclarations")),module(unparameterized("statements/Blocks")),module(unparameterized("expressions/Main"))])],[exports(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(sorts([sort("Stm")]),context-free-syntax([prod([sort("Block")],sort("Stm"),attrs([]))])),context-free-syntax([prod([lit(";")],sort("Stm"),attrs([term(cons("Empty"))]))])),context-free-syntax([prod([sort("Id"),lit(":"),sort("Stm")],sort("Stm"),attrs([term(cons("Labeled"))]))])),context-free-syntax([prod([sort("Expr"),lit(";")],sort("Stm"),attrs([term(cons("ExprStm"))]))])),context-free-syntax([prod([lit("if"),lit("("),sort("Expr"),lit(")"),sort("Stm")],sort("Stm"),attrs([prefer,term(cons("If"))])),prod([lit("if"),lit("("),sort("Expr"),lit(")"),sort("Stm"),lit("else"),sort("Stm")],sort("Stm"),attrs([term(cons("If"))]))])),context-free-syntax([prod([lit("assert"),sort("Expr"),lit(";")],sort("Stm"),attrs([term(cons("AssertStm"))])),prod([lit("assert"),sort("Expr"),lit(":"),sort("Expr"),lit(";")],sort("Stm"),attrs([term(cons("AssertStm"))]))])),sorts([sort("SwitchBlock"),sort("SwitchGroup"),sort("SwitchLabel")])),context-free-syntax([prod([lit("switch"),lit("("),sort("Expr"),lit(")"),sort("SwitchBlock")],sort("Stm"),attrs([term(cons("Switch"))])),prod([lit("{"),iter-star(sort("SwitchGroup")),iter-star(sort("SwitchLabel")),lit("}")],sort("SwitchBlock"),attrs([term(cons("SwitchBlock"))])),prod([iter(sort("SwitchLabel")),iter(sort("BlockStm"))],sort("SwitchGroup"),attrs([term(cons("SwitchGroup"))])),prod([lit("case"),sort("Expr"),lit(":")],sort("SwitchLabel"),attrs([term(cons("Case"))])),prod([lit("default"),lit(":")],sort("SwitchLabel"),attrs([term(cons("Default"))]))])),context-free-syntax([prod([lit("while"),lit("("),sort("Expr"),lit(")"),sort("Stm")],sort("Stm"),attrs([term(cons("While"))]))])),context-free-syntax([prod([lit("do"),sort("Stm"),lit("while"),lit("("),sort("Expr"),lit(")"),lit(";")],sort("Stm"),attrs([term(cons("DoWhile"))]))])),context-free-syntax([prod([lit("for"),lit("("),sort("LocalVarDec"),lit(";"),opt(sort("Expr")),lit(";"),iter-star-sep(sort("Expr"),lit(",")),lit(")"),sort("Stm")],sort("Stm"),attrs([term(cons("For"))])),prod([lit("for"),lit("("),iter-star-sep(sort("Expr"),lit(",")),lit(";"),opt(sort("Expr")),lit(";"),iter-star-sep(sort("Expr"),lit(",")),lit(")"),sort("Stm")],sort("Stm"),attrs([term(cons("For"))])),prod([lit("for"),lit("("),sort("FormalParam"),lit(":"),sort("Expr"),lit(")"),sort("Stm")],sort("Stm"),attrs([term(cons("ForEach"))]))])),context-free-syntax([prod([lit("break"),opt(sort("Id")),lit(";")],sort("Stm"),attrs([term(cons("Break"))]))])),context-free-syntax([prod([lit("continue"),opt(sort("Id")),lit(";")],sort("Stm"),attrs([term(cons("Continue"))]))])),context-free-syntax([prod([lit("return"),opt(sort("Expr")),lit(";")],sort("Stm"),attrs([term(cons("Return"))]))])),context-free-syntax([prod([lit("throw"),sort("Expr"),lit(";")],sort("Stm"),attrs([term(cons("Throw"))]))])),context-free-syntax([prod([lit("synchronized"),lit("("),sort("Expr"),lit(")"),sort("Block")],sort("Stm"),attrs([term(cons("Synchronized"))]))])),sorts([sort("CatchClause")])),context-free-syntax([prod([lit("try"),sort("Block"),iter(sort("CatchClause"))],sort("Stm"),attrs([term(cons("Try"))])),prod([lit("try"),sort("Block"),iter-star(sort("CatchClause")),lit("finally"),sort("Block")],sort("Stm"),attrs([term(cons("Try"))])),prod([lit("catch"),lit("("),sort("FormalParam"),lit(")"),sort("Block")],sort("CatchClause"),attrs([term(cons("Catch"))]))])))]),module(unparameterized("statements/LocalVariableDeclarations"),[imports([module(unparameterized("classes/MethodDeclarations")),module(unparameterized("classes/FieldDeclarations"))])],[exports(conc-grammars(sorts([sort("LocalVarDecStm"),sort("LocalVarDec")]),context-free-syntax([prod([sort("LocalVarDec"),lit(";")],sort("LocalVarDecStm"),attrs([prefer,term(cons("LocalVarDecStm"))])),prod([iter-star(sort("Anno")),sort("Type"),iter-sep(sort("VarDec"),lit(","))],sort("LocalVarDec"),attrs([prefer,term(cons("LocalVarDec"))]))])))]),module(unparameterized("statements/Blocks"),[imports([module(unparameterized("classes/ClassDeclarations")),module(unparameterized("statements/LocalVariableDeclarations")),module(unparameterized("statements/Statements"))])],[exports(conc-grammars(sorts([sort("BlockStm"),sort("Block")]),context-free-syntax([prod([lit("{"),iter-star(sort("BlockStm")),lit("}")],sort("Block"),attrs([term(cons("Block"))])),prod([sort("LocalVarDecStm")],sort("BlockStm"),attrs([])),prod([sort("ClassDec")],sort("BlockStm"),attrs([term(cons("ClassDecStm"))])),prod([sort("Stm")],sort("BlockStm"),attrs([]))])))]),module(unparameterized("classes/MethodDeclarations"),[imports([module(unparameterized("lexical/Identifiers")),module(unparameterized("lexical/Modifiers")),module(unparameterized("types/Main")),module(unparameterized("classes/FieldDeclarations")),module(unparameterized("interfaces/Annotations")),module(unparameterized("statements/Blocks"))])],[exports(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(sorts([sort("MethodDec"),sort("MethodDecHead"),sort("ResultType")]),context-free-syntax([prod([sort("MethodDecHead"),sort("MethodBody")],sort("MethodDec"),attrs([term(cons("MethodDec"))])),prod([iter-star(sort("Anno")),iter-star(sort("MethodMod")),sort("ResultType"),sort("Id"),lit("("),iter-star-sep(sort("FormalParam"),lit(",")),lit(")")],sort("MethodDecHead"),attrs([term(cons("MethodDecHead"))])),prod([sort("Type")],sort("ResultType"),attrs([])),prod([lit("void")],sort("ResultType"),attrs([term(cons("Void"))]))])),sorts([sort("FormalParam")])),context-free-syntax([prod([iter-star(sort("Anno")),sort("Type"),sort("VarDecId")],sort("FormalParam"),attrs([term(cons("Param"))]))])),context-free-syntax([])),sorts([sort("MethodMod")])),context-free-syntax([prod([sort("Public")],sort("MethodMod"),attrs([])),prod([sort("Private")],sort("MethodMod"),attrs([])),prod([sort("Native")],sort("MethodMod"),attrs([]))])),sorts([sort("ExceptionType")])),context-free-syntax([prod([sort("ClassType")],sort("ExceptionType"),attrs([]))])),sorts([sort("MethodBody")])),context-free-syntax([prod([sort("Block")],sort("MethodBody"),attrs([])),prod([lit(";")],sort("MethodBody"),attrs([term(cons("NoMethodBody"))]))])))]),module(unparameterized("arrays/ArrayInitializers"),[imports([module(unparameterized("classes/FieldDeclarations"))])],[exports(conc-grammars(sorts([sort("ArrayInit")]),context-free-syntax([prod([lit("{"),iter-star-sep(sort("VarInit"),lit(",")),lit("}")],sort("ArrayInit"),attrs([term(cons("ArrayInit"))])),prod([lit("{"),iter-star-sep(sort("VarInit"),lit(",")),lit(","),lit("}")],sort("ArrayInit"),attrs([term(cons("ArrayInit"))]))])))]),module(unparameterized("interfaces/Annotations"),[imports([module(unparameterized("lexical/Identifiers")),module(unparameterized("names/Main")),module(unparameterized("expressions/Main"))])],[exports(conc-grammars(conc-grammars(sorts([sort("Anno"),sort("ElemVal"),sort("ElemValPair")]),context-free-syntax([prod([lit("@"),sort("TypeName"),lit("("),iter-star-sep(sort("ElemValPair"),lit(",")),lit(")")],sort("Anno"),attrs([term(cons("Anno"))])),prod([lit("@"),sort("TypeName"),lit("("),sort("ElemVal"),lit(")")],sort("Anno"),attrs([term(cons("SingleElemAnno"))])),prod([lit("@"),sort("TypeName")],sort("Anno"),attrs([term(cons("MarkerAnno"))]))])),context-free-syntax([prod([sort("Id"),lit("="),sort("ElemVal")],sort("ElemValPair"),attrs([term(cons("ElemValPair"))])),prod([sort("Expr")],sort("ElemVal"),attrs([])),prod([sort("Anno")],sort("ElemVal"),attrs([])),prod([lit("{"),iter-star-sep(sort("ElemVal"),lit(",")),lit("}")],sort("ElemVal"),attrs([term(cons("ElemValArrayInit"))])),prod([lit("{"),iter-star-sep(sort("ElemVal"),lit(",")),lit(","),lit("}")],sort("ElemVal"),attrs([term(cons("ElemValArrayInit"))])),prod([sort("LHS"),lit("="),sort("Expr")],sort("ElemVal"),attrs([reject]))])))]),module(unparameterized("classes/FieldDeclarations"),[imports([module(unparameterized("lexical/Identifiers")),module(unparameterized("lexical/Modifiers")),module(unparameterized("types/Main")),module(unparameterized("interfaces/Annotations")),module(unparameterized("arrays/ArrayInitializers")),module(unparameterized("expressions/Main"))])],[exports(conc-grammars(conc-grammars(conc-grammars(sorts([sort("FieldDec"),sort("VarDec"),sort("VarDecId"),sort("Dim"),sort("VarInit")]),context-free-syntax([prod([iter-star(sort("Anno")),iter-star(sort("FieldMod")),sort("Type"),iter-sep(sort("VarDec"),lit(",")),lit(";")],sort("FieldDec"),attrs([term(cons("FieldDec"))])),prod([sort("VarDecId")],sort("VarDec"),attrs([term(cons("VarDec"))])),prod([sort("VarDecId"),lit("="),sort("VarInit")],sort("VarDec"),attrs([term(cons("VarDec"))])),prod([sort("Id")],sort("VarDecId"),attrs([])),prod([sort("Id"),iter(sort("Dim"))],sort("VarDecId"),attrs([term(cons("ArrayVarDecId"))])),prod([lit("["),lit("]")],sort("Dim"),attrs([term(cons("Dim"))])),prod([sort("Expr")],sort("VarInit"),attrs([])),prod([sort("ArrayInit")],sort("VarInit"),attrs([]))])),sorts([sort("FieldMod")])),context-free-syntax([prod([sort("Public")],sort("FieldMod"),attrs([])),prod([sort("Private")],sort("FieldMod"),attrs([]))])))]),module(unparameterized("types/ReferenceTypes"),[imports([module(unparameterized("lexical/Identifiers")),module(unparameterized("names/Main")),module(unparameterized("types/Main"))])],[exports(conc-grammars(conc-grammars(conc-grammars(sorts([sort("RefType"),sort("ClassOrInterfaceType"),sort("ClassType"),sort("InterfaceType"),sort("TypeDecSpec"),sort("ArrayType")]),context-free-syntax([prod([sort("ClassOrInterfaceType")],sort("RefType"),attrs([])),prod([sort("ArrayType")],sort("RefType"),attrs([]))])),context-free-syntax([prod([sort("TypeDecSpec")],sort("ClassOrInterfaceType"),attrs([term(cons("ClassOrInterfaceType"))])),prod([sort("TypeDecSpec")],sort("ClassType"),attrs([term(cons("ClassType"))])),prod([sort("TypeDecSpec")],sort("InterfaceType"),attrs([term(cons("InterfaceType"))])),prod([sort("TypeName")],sort("TypeDecSpec"),attrs([])),prod([sort("TypeDecSpec"),lit("."),sort("Id")],sort("TypeDecSpec"),attrs([term(cons("Member"))]))])),context-free-syntax([prod([sort("Type"),lit("["),lit("]")],sort("ArrayType"),attrs([term(cons("ArrayType"))]))])))]),module(unparameterized("lexical/Modifiers"),[],[exports(conc-grammars(sorts([sort("Public"),sort("Private"),sort("Native")]),context-free-syntax([prod([lit("public")],sort("Public"),attrs([term(cons("Public"))])),prod([lit("private")],sort("Private"),attrs([term(cons("Private"))])),prod([lit("Native")],sort("Native"),attrs([term(cons("Native"))])),prod([sort("Public")],sort("Modifier"),attrs([])),prod([sort("Private")],sort("Modifier"),attrs([])),prod([sort("Native")],sort("Modifier"),attrs([]))])))]),module(unparameterized("lexical/Keywords"),[],[exports(conc-grammars(conc-grammars(sorts([sort("Keyword")]),lexical-syntax([prod([lit("abstract")],sort("Keyword"),attrs([])),prod([lit("assert")],sort("Keyword"),attrs([])),prod([lit("boolean")],sort("Keyword"),attrs([])),prod([lit("Boolean")],sort("Keyword"),attrs([])),prod([lit("break")],sort("Keyword"),attrs([])),prod([lit("byte")],sort("Keyword"),attrs([])),prod([lit("case")],sort("Keyword"),attrs([])),prod([lit("catch")],sort("Keyword"),attrs([])),prod([lit("char")],sort("Keyword"),attrs([])),prod([lit("class")],sort("Keyword"),attrs([])),prod([lit("Class")],sort("Keyword"),attrs([])),prod([lit("const")],sort("Keyword"),attrs([])),prod([lit("continue")],sort("Keyword"),attrs([])),prod([lit("Controller")],sort("Keyword"),attrs([])),prod([lit("default")],sort("Keyword"),attrs([])),prod([lit("do")],sort("Keyword"),attrs([])),prod([lit("double")],sort("Keyword"),attrs([])),prod([lit("else")],sort("Keyword"),attrs([])),prod([lit("enum")],sort("Keyword"),attrs([])),prod([lit("extends")],sort("Keyword"),attrs([])),prod([lit("final")],sort("Keyword"),attrs([])),prod([lit("finally")],sort("Keyword"),attrs([])),prod([lit("float")],sort("Keyword"),attrs([])),prod([lit("for")],sort("Keyword"),attrs([])),prod([lit("goto")],sort("Keyword"),attrs([])),prod([lit("if")],sort("Keyword"),attrs([])),prod([lit("implements")],sort("Keyword"),attrs([])),prod([lit("import")],sort("Keyword"),attrs([])),prod([lit("in")],sort("Keyword"),attrs([])),prod([lit("instanceof")],sort("Keyword"),attrs([])),prod([lit("int")],sort("Keyword"),attrs([])),prod([lit("Int")],sort("Keyword"),attrs([])),prod([lit("interface")],sort("Keyword"),attrs([])),prod([lit("Interface")],sort("Keyword"),attrs([])),prod([lit("long")],sort("Keyword"),attrs([])),prod([lit("native")],sort("Keyword"),attrs([])),prod([lit("new")],sort("Keyword"),attrs([])),prod([lit("package")],sort("Keyword"),attrs([])),prod([lit("private")],sort("Keyword"),attrs([])),prod([lit("protected")],sort("Keyword"),attrs([])),prod([lit("public")],sort("Keyword"),attrs([])),prod([lit("real")],sort("Keyword"),attrs([])),prod([lit("Real")],sort("Keyword"),attrs([])),prod([lit("return")],sort("Keyword"),attrs([])),prod([lit("short")],sort("Keyword"),attrs([])),prod([lit("static")],sort("Keyword"),attrs([])),prod([lit("strictfp")],sort("Keyword"),attrs([])),prod([lit("super")],sort("Keyword"),attrs([])),prod([lit("switch")],sort("Keyword"),attrs([])),prod([lit("synchronized")],sort("Keyword"),attrs([])),prod([lit("this")],sort("Keyword"),attrs([])),prod([lit("throw")],sort("Keyword"),attrs([])),prod([lit("throws")],sort("Keyword"),attrs([])),prod([lit("transient")],sort("Keyword"),attrs([])),prod([lit("try")],sort("Keyword"),attrs([])),prod([lit("void")],sort("Keyword"),attrs([])),prod([lit("volatile")],sort("Keyword"),attrs([])),prod([lit("while")],sort("Keyword"),attrs([]))])),lexical-restrictions([follow([lit("abstract"),lit("assert"),lit("boolean"),lit("Boolean"),lit("break"),lit("byte"),lit("case"),lit("catch"),lit("char"),lit("class"),lit("Class"),lit("const"),lit("continue"),lit("default"),lit("do"),lit("double"),lit("else"),lit("enum"),lit("extends"),lit("final"),lit("finally"),lit("float"),lit("for"),lit("goto"),lit("if"),lit("implements"),lit("import"),lit("instanceof"),lit("in"),lit("int"),lit("Int"),lit("real"),lit("Real"),lit("interface"),lit("Interface"),lit("long"),lit("native"),lit("new"),lit("package"),lit("private"),lit("protected"),lit("public"),lit("real"),lit("Real"),lit("return"),lit("short"),lit("static"),lit("strictfp"),lit("super"),lit("switch"),lit("synchronized"),lit("this"),lit("throw"),lit("throws"),lit("transient"),lit("try"),lit("void"),lit("volatile"),lit("while")],single(char-class(simple-charclass(present(conc(range(short("A"),short("Z")),conc(range(short("a"),short("z")),conc(range(short("0"),short("9")),conc(short("\\_"),short("\\$"))))))))))])))]),module(unparameterized("lexical/Identifiers"),[imports([module(unparameterized("lexical/Keywords"))])],[exports(conc-grammars(conc-grammars(conc-grammars(sorts([sort("Id"),sort("ID")]),context-free-syntax([prod([sort("ID")],sort("Id"),attrs([term(cons("Id"))]))])),lexical-syntax([prod([char-class(simple-charclass(present(conc(range(short("A"),short("Z")),conc(range(short("a"),short("z")),conc(short("\\_"),short("\\$"))))))),iter-star(char-class(simple-charclass(present(conc(range(short("A"),short("Z")),conc(range(short("a"),short("z")),conc(range(short("0"),short("9")),conc(short("\\_"),short("\\$")))))))))],sort("ID"),attrs([])),prod([sort("Keyword")],sort("ID"),attrs([reject])),prod([lit("True")],sort("ID"),attrs([reject])),prod([lit("False")],sort("ID"),attrs([reject])),prod([lit("null")],sort("ID"),attrs([reject]))])),lexical-restrictions([follow([sort("ID")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),conc(short("\\_"),short("\\$"))))))))))])))]),module(unparameterized("classes/ClassDeclarations"),[imports([module(unparameterized("lexical/Identifiers")),module(unparameterized("lexical/Modifiers")),module(unparameterized("types/ReferenceTypes")),module(unparameterized("classes/FieldDeclarations")),module(unparameterized("classes/MethodDeclarations")),module(unparameterized("classes/InstanceInitializers")),module(unparameterized("classes/ConstructorDeclarations")),module(unparameterized("interfaces/InterfaceDeclarations"))])],[exports(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(sorts([sort("ClassDec"),sort("ClassBody"),sort("ClassDecHead")]),context-free-syntax([prod([sort("ClassDecHead"),sort("ClassBody")],sort("ClassDec"),attrs([term(cons("ClassDec"))])),prod([lit("{"),iter-star(sort("ClassBodyDec")),lit("}")],sort("ClassBody"),attrs([term(cons("ClassBody"))])),prod([iter-star(sort("Anno")),iter-star(sort("ClassMod")),opt(sort("Super")),opt(sort("Interfaces")),lit("Class"),sort("Id")],sort("ClassDecHead"),attrs([term(cons("ClassDecHead"))]))])),sorts([sort("ClassMod")])),context-free-syntax([prod([sort("Public")],sort("ClassMod"),attrs([])),prod([sort("Private")],sort("ClassMod"),attrs([]))])),sorts([sort("Super")])),context-free-syntax([prod([sort("ClassType")],sort("Super"),attrs([term(cons("SuperDec"))]))])),sorts([sort("Interfaces")])),context-free-syntax([prod([iter-sep(sort("InterfaceType"),lit(","))],sort("Interfaces"),attrs([term(cons("ImplementsDec"))]))])),sorts([sort("ClassBodyDec"),sort("ClassMemberDec")])),context-free-syntax([prod([sort("ClassMemberDec")],sort("ClassBodyDec"),attrs([])),prod([sort("InstanceInit")],sort("ClassBodyDec"),attrs([])),prod([sort("ConstrDec")],sort("ClassBodyDec"),attrs([]))])),context-free-syntax([prod([sort("FieldDec")],sort("ClassMemberDec"),attrs([])),prod([sort("MethodDec")],sort("ClassMemberDec"),attrs([])),prod([sort("ClassDec")],sort("ClassMemberDec"),attrs([])),prod([sort("InterfaceDec")],sort("ClassMemberDec"),attrs([])),prod([lit(";")],sort("ClassMemberDec"),attrs([term(cons("Semicolon"))]))])))]),module(unparameterized("expressions/ClassInstanceCreation"),[imports([module(unparameterized("expressions/Main")),module(unparameterized("classes/ClassDeclarations"))])],[exports(context-free-syntax([prod([lit("new"),sort("ClassOrInterfaceType"),lit("("),iter-star-sep(sort("Expr"),lit(",")),lit(")"),opt(sort("ClassBody"))],sort("Expr"),attrs([term(cons("NewInstance"))]))]))]),module(unparameterized("expressions/Main"),[imports([module(unparameterized("expressions/ClassInstanceCreation")),module(unparameterized("expressions/ArrayCreation")),module(unparameterized("expressions/FieldAccess")),module(unparameterized("expressions/UnaryOperators")),module(unparameterized("expressions/BinaryOperators")),module(unparameterized("expressions/AssignmentOperators")),module(unparameterized("expressions/ArrayAccess")),module(unparameterized("expressions/Primary")),module(unparameterized("expressions/Postfix")),module(unparameterized("expressions/MethodInvocation"))])],[exports(sorts([sort("Expr")]))]),module(unparameterized("Apricot"),[imports([module(unparameterized("expressions/Main")),module(unparameterized("types/Main")),module(unparameterized("classes/Main")),module(unparameterized("arrays/Main")),module(unparameterized("lexical/Main")),module(unparameterized("names/Main")),module(unparameterized("interfaces/Main")),module(unparameterized("statements/Main")),module(unparameterized("packages/Main"))])],[exports(conc-grammars(context-free-start-symbols([sort("Start")]),context-free-syntax([prod([sort("CompilationUnit")],sort("Start"),attrs([term(cons("StartApricot"))]))])))])])