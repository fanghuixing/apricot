module(unparameterized("lexical/literals/FloatingPointLiterals"),[],[exports(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(sorts([sort("FloatLiteral"),sort("DeciFloatLiteral"),sort("HexaFloatLiteral")]),context-free-syntax([prod([sort("DeciFloatLiteral")],sort("FloatLiteral"),attrs([term(default(appl(unquoted("cons"),[fun(quoted("\"Float\""))])))])),prod([sort("HexaFloatLiteral")],sort("FloatLiteral"),attrs([term(default(appl(unquoted("cons"),[fun(quoted("\"Float\""))])))]))])),lexical-syntax([prod([sort("DeciFloatNumeral"),opt(char-class(simple-charclass(present(conc(short("f"),conc(short("F"),conc(short("d"),short("D"))))))))],sort("DeciFloatLiteral"),no-attrs),prod([sort("HexaFloatNumeral"),opt(char-class(simple-charclass(present(conc(short("f"),conc(short("F"),conc(short("d"),short("D"))))))))],sort("HexaFloatLiteral"),no-attrs),prod([iter(char-class(simple-charclass(present(range(short("0"),short("9"))))))],sort("DeciFloatLiteral"),attrs([reject]))])),lexical-restrictions([follow([sort("DeciFloatLiteral")],single(char-class(simple-charclass(present(conc(short("f"),conc(short("F"),conc(short("d"),short("D"))))))))),follow([sort("HexaFloatLiteral")],single(char-class(simple-charclass(present(conc(short("f"),conc(short("F"),conc(short("d"),short("D")))))))))])),sorts([sort("DeciFloatNumeral"),sort("DeciFloatDigits"),sort("DeciFloatExponentPart")])),lexical-syntax([prod([sort("DeciFloatDigits"),opt(sort("DeciFloatExponentPart"))],sort("DeciFloatNumeral"),no-attrs),prod([iter-star(char-class(simple-charclass(present(range(short("0"),short("9")))))),lit("\".\""),iter-star(char-class(simple-charclass(present(range(short("0"),short("9"))))))],sort("DeciFloatDigits"),no-attrs),prod([lit("\".\"")],sort("DeciFloatDigits"),attrs([reject])),prod([iter(char-class(simple-charclass(present(range(short("0"),short("9"))))))],sort("DeciFloatDigits"),no-attrs),prod([char-class(simple-charclass(present(conc(short("e"),short("E"))))),sort("SignedInteger")],sort("DeciFloatExponentPart"),no-attrs),prod([opt(char-class(simple-charclass(present(conc(short("\\+"),short("\\-")))))),iter(char-class(simple-charclass(present(range(short("0"),short("9"))))))],sort("SignedInteger"),no-attrs)])),lexical-restrictions([follow([sort("DeciFloatDigits")],single(char-class(simple-charclass(present(range(short("0"),short("9"))))))),follow([sort("DeciFloatExponentPart")],single(char-class(simple-charclass(present(range(short("0"),short("9")))))))])),sorts([sort("HexaFloatNumeral"),sort("HexaSignificand"),sort("BinaryExponent"),sort("SignedInteger")])),lexical-syntax([prod([sort("HexaSignificand"),sort("BinaryExponent")],sort("HexaFloatNumeral"),no-attrs),prod([char-class(simple-charclass(present(short("0")))),char-class(simple-charclass(present(conc(short("x"),short("X"))))),iter(char-class(simple-charclass(present(conc(range(short("0"),short("9")),conc(range(short("a"),short("f")),range(short("A"),short("F"))))))))],sort("HexaSignificand"),no-attrs),prod([char-class(simple-charclass(present(short("0")))),char-class(simple-charclass(present(conc(short("x"),short("X"))))),iter-star(char-class(simple-charclass(present(conc(range(short("0"),short("9")),conc(range(short("a"),short("f")),range(short("A"),short("F")))))))),lit("\".\""),iter-star(char-class(simple-charclass(present(conc(range(short("0"),short("9")),conc(range(short("a"),short("f")),range(short("A"),short("F"))))))))],sort("HexaSignificand"),no-attrs),prod([char-class(simple-charclass(present(short("0")))),char-class(simple-charclass(present(conc(short("x"),short("X"))))),lit("\".\"")],sort("HexaSignificand"),attrs([reject])),prod([char-class(simple-charclass(present(conc(short("p"),short("P"))))),sort("SignedInteger")],sort("BinaryExponent"),no-attrs)])),lexical-restrictions([follow([sort("HexaSignificand")],single(char-class(simple-charclass(present(conc(range(short("0"),short("9")),conc(range(short("a"),short("f")),range(short("A"),short("F"))))))))),follow([sort("SignedInteger")],single(char-class(simple-charclass(present(range(short("0"),short("9")))))))])))])